name: Lint and Build

on:
  push:
    branches:
      - main
      - "test-*"
    tags:
      - "v*.*.*"
  pull_request:
    branches:
      - main

jobs:
  check_nix:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: git checkout
        uses: actions/checkout@v3

      - name: Cache Nix store
        uses: actions/cache@v3
        id: nix-cache
        with:
          path: /tmp/nixcache
          key: "${{ runner.os }}-build-${{ hashFiles('flake.lock', 'Cargo.lock') }}:"

      - name: Install Nix
        uses: cachix/install-nix-action@v20

      - name: Import Nix store cache
        if: "steps.nix-cache.outputs.cache-hit == 'true'"
        run: "nix copy --no-check-sigs --from /tmp/nixcache ./"

      - name: Enable Cachix
        uses: cachix/cachix-action@v12
        with:
          name: acmecrab
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'

      - name: Format
        run: |
          nix develop --command \
            cargo fmt --check

      - name: Clippy
        run: |
          nix develop --command \
            cargo clippy -- -Dwarnings

      - name: Audit
        run: |
          nix develop --command \
            cargo audit --deny warnings

      - name: Flake Check
        run: |
          nix flake check

      - name: Export Nix store cache
        if: "steps.nix-cache.outputs.cache-hit != 'true'"
        run: "nix copy --no-check-sigs --to /tmp/nixcache ./"

  build_and_test_nix:
    name: Test and build
    needs: check_nix
    runs-on: ubuntu-latest
    steps:
      - name: git checkout
        uses: actions/checkout@v3

      - name: Cache Nix store
        uses: actions/cache@v3
        id: nix-cache
        with:
          path: /tmp/nixcache
          key: "${{ runner.os }}-build-${{ hashFiles('flake.lock', 'Cargo.lock') }}:"

      - name: Install Nix
        uses: cachix/install-nix-action@v20

      - name: Import Nix store cache
        if: "steps.nix-cache.outputs.cache-hit == 'true'"
        run: "nix copy --no-check-sigs --from /tmp/nixcache ./"

      - name: Enable Cachix
        uses: cachix/cachix-action@v10
        with:
          name: acmecrab
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'

      - name: Test
        run: |
          nix develop --command \
            cargo test --locked

      - name: Build
        run: |
          nix build

      - name: Export Nix store cache
        if: "steps.nix-cache.outputs.cache-hit != 'true'"
        run: "nix copy --no-check-sigs --to /tmp/nixcache ./"
